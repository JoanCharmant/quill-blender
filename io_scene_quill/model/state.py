# Serialization functions for the Quill state file (the file named "State.json").
# This file was initially generated by Quicktype using a JSON schema.
# The schema was generated by Quicktype from sample data and manually edited.
# The generated code is manually post-processed to add default initializers.

def from_float(x):
    assert isinstance(x, (float, int)) and not isinstance(x, bool)
    return float(x)


def from_str(x):
    assert isinstance(x, str)
    return x


def to_float(x):
    assert isinstance(x, float)
    return x


def to_class(c, x):
    assert isinstance(x, c)
    return x.to_dict()


def from_bool(x):
    assert isinstance(x, bool)
    return x


def from_int(x):
    assert isinstance(x, int) and not isinstance(x, bool)
    return x


def from_list(f, x):
    assert isinstance(x, list)
    return [f(y) for y in x]


class Surface:
    def __init__(self, scale, texture):
        self.scale = scale
        self.texture = texture

    @staticmethod
    def from_dict(obj):
        assert isinstance(obj, dict)
        scale = from_float(obj.get("Scale"))
        texture = from_str(obj.get("Texture"))
        return Surface(scale, texture)

    def to_dict(self):
        result = {}
        result["Scale"] = to_float(self.scale)
        result["Texture"] = from_str(self.texture)
        return result

    @staticmethod
    def from_default():
        scale = 1.0
        texture = "None"
        return Surface(scale, texture)


class DetailRender:
    def __init__(self, surface):
        self.surface = surface

    @staticmethod
    def from_dict(obj):
        assert isinstance(obj, dict)
        surface = Surface.from_dict(obj.get("Surface"))
        return DetailRender(surface)

    def to_dict(self):
        result = {}
        result["Surface"] = to_class(Surface, self.surface)
        return result

    @staticmethod
    def from_default():
        surface = Surface.from_default()
        return DetailRender(surface)


class Rulers:
    def __init__(self, show_grid):
        self.show_grid = show_grid

    @staticmethod
    def from_dict(obj):
        assert isinstance(obj, dict)
        show_grid = from_bool(obj.get("ShowGrid"))
        return Rulers(show_grid)

    def to_dict(self):
        result = {}
        result["ShowGrid"] = from_bool(self.show_grid)
        return result

    @staticmethod
    def from_default():
        show_grid = False
        return Rulers(show_grid)


class Tool:
    def __init__(self, brush_id, color, directional_stroke, opacity, size, transparent_taper, width_taper):
        self.brush_id = brush_id
        self.color = color
        self.directional_stroke = directional_stroke
        self.opacity = opacity
        self.size = size
        self.transparent_taper = transparent_taper
        self.width_taper = width_taper

    @staticmethod
    def from_dict(obj):
        assert isinstance(obj, dict)
        brush_id = from_int(obj.get("BrushID"))
        color = from_list(from_float, obj.get("Color"))
        directional_stroke = from_bool(obj.get("DirectionalStroke"))
        opacity = from_float(obj.get("Opacity"))
        size = from_float(obj.get("Size"))
        transparent_taper = from_str(obj.get("TransparentTaper"))
        width_taper = from_str(obj.get("WidthTaper"))
        return Tool(brush_id, color, directional_stroke, opacity, size, transparent_taper, width_taper)

    def to_dict(self):
        result = {}
        result["BrushID"] = from_int(self.brush_id)
        result["Color"] = from_list(to_float, self.color)
        result["DirectionalStroke"] = from_bool(self.directional_stroke)
        result["Opacity"] = to_float(self.opacity)
        result["Size"] = to_float(self.size)
        result["TransparentTaper"] = from_str(self.transparent_taper)
        result["WidthTaper"] = from_str(self.width_taper)
        return result

    @staticmethod
    def from_default():
        brush_id = 3
        color = [0.0, 0.0, 0.0]
        directional_stroke = False
        opacity = 1.0
        size = 0.01
        transparent_taper = "None"
        width_taper = "Pressure"
        return Tool(brush_id, color, directional_stroke, opacity, size, transparent_taper, width_taper)


class Quill:
    def __init__(self, camera_layer, color_palette, detail_render, direct_manipulation, move_layer, paint_layer, rulers, tool, tool_name):
        self.camera_layer = camera_layer
        self.color_palette = color_palette
        self.detail_render = detail_render
        self.direct_manipulation = direct_manipulation
        self.move_layer = move_layer
        self.paint_layer = paint_layer
        self.rulers = rulers
        self.tool = tool
        self.tool_name = tool_name

    @staticmethod
    def from_dict(obj):
        assert isinstance(obj, dict)
        camera_layer = from_str(obj.get("CameraLayer"))
        color_palette = from_list(from_float, obj.get("ColorPalette"))
        detail_render = DetailRender.from_dict(obj.get("DetailRender"))
        direct_manipulation = from_int(obj.get("DirectManipulation"))
        move_layer = from_str(obj.get("MoveLayer"))
        paint_layer = from_str(obj.get("PaintLayer"))
        rulers = Rulers.from_dict(obj.get("Rulers"))
        tool = Tool.from_dict(obj.get("Tool"))
        tool_name = from_str(obj.get("ToolName"))
        return Quill(camera_layer, color_palette, detail_render, direct_manipulation, move_layer, paint_layer, rulers, tool, tool_name)

    def to_dict(self):
        result = {}
        result["CameraLayer"] = from_str(self.camera_layer)
        result["ColorPalette"] = from_list(to_float, self.color_palette)
        result["DetailRender"] = to_class(DetailRender, self.detail_render)
        result["DirectManipulation"] = from_int(self.direct_manipulation)
        result["MoveLayer"] = from_str(self.move_layer)
        result["PaintLayer"] = from_str(self.paint_layer)
        result["Rulers"] = to_class(Rulers, self.rulers)
        result["Tool"] = to_class(Tool, self.tool)
        result["ToolName"] = from_str(self.tool_name)
        return result

    @staticmethod
    def from_default():
        camera_layer = ""
        color_palette = [0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000,0.820000]
        detail_render = DetailRender.from_default()
        direct_manipulation = 0
        move_layer = ""
        paint_layer = "Root/Paint"
        rulers = Rulers.from_default()
        tool = Tool.from_default()
        tool_name = "Paint"
        return Quill(camera_layer, color_palette, detail_render, direct_manipulation, move_layer, paint_layer, rulers, tool, tool_name)


class QuillState:
    def __init__(self, quill):
        self.quill = quill

    @staticmethod
    def from_dict(obj):
        assert isinstance(obj, dict)
        quill = Quill.from_dict(obj.get("Quill"))
        return QuillState(quill)

    def to_dict(self):
        result = {}
        result["Quill"] = to_class(Quill, self.quill)
        return result

    @staticmethod
    def from_default():
        quill = Quill.from_default()
        return QuillState(quill)


def quill_state_from_dict(s):
    return QuillState.from_dict(s)


def quill_state_to_dict(x):
    return to_class(QuillState, x)


def quill_state_from_default():
    return QuillState.from_default()
